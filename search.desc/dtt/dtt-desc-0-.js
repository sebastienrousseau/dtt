searchState.loadedDescShard("dtt", 0, "DateTime (DTT) is a comprehensive library for date and …\nCustom error type for the application.\nRepresents a date and time with timezone offset support.\nError that occurs during datetime operations.\nError that occurs when retrieving environment variables.\nGeneral I/O or parsing error.\nError that occurs during other operations.\nError that occurs during serialization.\nError for simulating a failure in test mode.\nAdds a Duration to the <code>DateTime</code>.\nCompares two <code>DateTimes</code> for ordering.\nLibrary constants and configuration values\nCore datetime functionality and operations.\nThe date and time in UTC (when offset = <code>UtcOffset::UTC</code>) or …\nReturns the current UTC time as the default <code>DateTime</code> value.\nAdds the specified number of days to the given <code>DateTime</code> …\nAsserts that the given expression is true.\nCreates a copy of the provided <code>DateTime</code> object.\nCreates a new vector containing the provided elements.\nA helper macro to calculate the difference between two …\nCalculates the difference in days between two <code>DateTime</code> …\nCalculates the difference in seconds between two <code>DateTime</code> …\nFormats a <code>DateTime</code> object using the provided format string.\nGenerates a function that validates a given input string …\nJoins multiple strings into a single string.\nCreates a new map of the given key-value pairs.\nReturns the maximum of the given values.\nReturns the minimum of the given values.\nCreates a new <code>DateTime</code> instance with the specified …\nCreates a new <code>DateTime</code> instance with the current date and …\nPrints the arguments to the console.\nPrints the arguments to the console.\nPrints a vector of elements to the console.\nSubtracts the specified number of days from the given …\nCreates a new vector of the given elements.\nError handling types and implementations.\nFormats the <code>DateTime</code> using RFC 3339 format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a string into a <code>DateTime</code> instance (RFC 3339 or ISO …\nComputes a hash value for the <code>DateTime</code> based on its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a function that validates a given input string …\nMacro definitions for common operations.\nThe timezone offset from UTC.\nCompares two <code>DateTime</code> for ordering, returning …\nCommonly used types and traits.\nRuns the main library functionality with proper error …\nSubtracts a Duration from the <code>DateTime</code>.\nLibrary description displayed during initialization\nValue indicating test mode is enabled\nEnvironment variable controlling test mode\nCurrent version of the library from Cargo.toml\nWelcome message displayed during initialization\nRepresents a date and time with timezone offset support.\nA builder for <code>DateTime</code> objects, allowing more ergonomic …\nAdds a specified number of days to the <code>DateTime</code>.\nAdds a specified number of months to the <code>DateTime</code>.\nAdds a specified number of years to the <code>DateTime</code>.\nBuilds the final <code>DateTime</code> from the builder state.\nConverts the current <code>DateTime</code> to another timezone.\nThe date and time in UTC (when offset = <code>UtcOffset::UTC</code>) or …\nReturns the day component of the <code>DateTime</code>.\nSets the day component.\nHelper function to determine the number of days in a given …\nCalculates the duration between this <code>DateTime</code> and another.\nReturns a new <code>DateTime</code> for the end of the current month.\nReturns a new <code>DateTime</code> for the end of the current week …\nReturns a new <code>DateTime</code> for the end of the current year.\nFormats the <code>DateTime</code> according to the specified format …\nFormats the <code>DateTime</code> as an ISO 8601 string …\nFormats the <code>DateTime</code> as an RFC 3339 string.\nConverts this <code>DateTime</code> to another timezone, then formats it\nReturns the argument unchanged.\nCreates a <code>DateTime</code> instance from individual components.\nReturns the hour component of the <code>DateTime</code>.\nSets the hour component.\nCalls <code>U::from(self)</code>.\nHelper function to determine if a year is a leap year.\nValidates whether a string represents a valid day of the …\nValidates whether a string represents a valid hour.\nReturns <code>true</code> if the input string is a valid ISO 8601 or …\nValidates whether a string represents a valid ISO week …\nValidates whether a string represents a valid microsecond.\nValidates whether a string represents a valid minute.\nValidates whether a string represents a valid month.\nValidates whether a string represents a valid ordinal day …\nValidates whether a string represents a valid second.\nValidates whether a string represents a valid time in …\nValidates whether a string represents a valid year.\nChecks if the current <code>DateTime</code> falls within a specific …\nReturns the ISO week component of the <code>DateTime</code>.\nReturns the microsecond component of the <code>DateTime</code>.\nReturns the minute component of the <code>DateTime</code>.\nSets the minute component.\nReturns the month component of the <code>DateTime</code>.\nSets the month component.\nCreates a new <code>DateTime</code> instance representing the current …\nCreates a new <code>DateTimeBuilder</code> with default values set to …\nCreates a new <code>DateTime</code> instance with a custom UTC offset.\nCreates a new <code>DateTime</code> instance with the current time in …\nReturns a new <code>DateTime</code> which is exactly one day later.\nReturns the timezone offset of the <code>DateTime</code>.\nSets the time zone offset component.\nThe timezone offset from UTC.\nReturns the ordinal day (day of year) component of the …\nParses a string representation of a date and time.\nParses a date/time string using a custom format …\nReturns a new <code>DateTime</code> which is exactly one day earlier.\nReturns the second component of the <code>DateTime</code>.\nSets the second component.\nSets the date components while maintaining the current …\nSets the time components (hour, minute, second) while …\nReturns a new <code>DateTime</code> for the start of the current month.\nReturns a new <code>DateTime</code> for the start of the current week …\nReturns a new <code>DateTime</code> for the start of the current year.\nSubtracts a specified number of months from the <code>DateTime</code>.\nSubtracts a specified number of years from the <code>DateTime</code>.\nGets the Unix timestamp (seconds since Unix epoch).\nUpdates the <code>DateTime</code> to the current time while preserving …\nReturns the weekday of the <code>DateTime</code>.\nReturns the year component of the <code>DateTime</code>.\nSets the year component.\nCustom error type for the application.\nA component (year, month, day, etc.) is out of the valid …\nCustom error type for the <code>DateTime</code> library.\nError that occurs during datetime operations.\nError that occurs when retrieving environment variables.\nGeneral I/O or parsing error.\nThe date is invalid (e.g., February 30).\nThe provided date format is invalid.\nThe time is invalid (e.g., 25:00).\nThe provided timezone is invalid or not supported. DST is …\nError that occurs during other operations.\nAn error occurred while parsing the date/time string.\nError that occurs during serialization.\nError for simulating a failure in test mode.\nProvides a default value for <code>DateTimeError</code>.\nDeserializes a string into a <code>DateTimeError</code>.\nReturns the argument unchanged.\nCustom implementation of the <code>Hash</code> trait for <code>DateTimeError</code>.\nCalls <code>U::from(self)</code>.\nSerializes the <code>DateTimeError</code> into a string representation.")